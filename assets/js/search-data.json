{
  
    
        "post0": {
            "title": "Title",
            "content": "&gt; &quot;Buiding a star wars character classifier using fastai&quot; - badges: true - comments: true - author: Naman Manchanda - categories: [fastpages, jupyter] . Star Wars Classifier . . This notebook consists of building a Star Wars classifier from scratch. The notebook doesn&#39;t use any predefined dataset. So, I&#39;ll be downloading the dataset on the go by scraping the images from internet. For the sake of keeping it simple, I&#39;ll be making a 3 class classifier mainly of Yoda, Luke and Wookie. The model development will be done using fastai. If you like the notebook, consider giving an upvote. ✅ Table of Contents: . Downloads | Packages | Pre-model building 3.1 Create folder | 3.2 Scrape images | 3.3 Move images | . | Data Loaders 4.1 For a single label | 4.2 For the model building | . | Model Building 5.1 Training | 5.2 Prediction | . | 1. Downloads . back to top . I&#39;m using a python package named icrawler for scraping the images. . !pip install icrawler . Collecting icrawler Downloading icrawler-0.6.4.tar.gz (26 kB) Collecting beautifulsoup4&gt;=4.4.1 Downloading beautifulsoup4-4.9.3-py3-none-any.whl (115 kB) |████████████████████████████████| 115 kB 973 kB/s eta 0:00:01 Requirement already satisfied: lxml in /opt/conda/lib/python3.7/site-packages (from icrawler) (4.6.3) Requirement already satisfied: requests&gt;=2.9.1 in /opt/conda/lib/python3.7/site-packages (from icrawler) (2.25.1) Requirement already satisfied: six&gt;=1.10.0 in /opt/conda/lib/python3.7/site-packages (from icrawler) (1.15.0) Requirement already satisfied: Pillow in /opt/conda/lib/python3.7/site-packages (from icrawler) (7.2.0) Collecting soupsieve&gt;1.2 Downloading soupsieve-2.2.1-py3-none-any.whl (33 kB) Requirement already satisfied: idna&lt;3,&gt;=2.5 in /opt/conda/lib/python3.7/site-packages (from requests&gt;=2.9.1-&gt;icrawler) (2.10) Requirement already satisfied: chardet&lt;5,&gt;=3.0.2 in /opt/conda/lib/python3.7/site-packages (from requests&gt;=2.9.1-&gt;icrawler) (4.0.0) Requirement already satisfied: urllib3&lt;1.27,&gt;=1.21.1 in /opt/conda/lib/python3.7/site-packages (from requests&gt;=2.9.1-&gt;icrawler) (1.26.4) Requirement already satisfied: certifi&gt;=2017.4.17 in /opt/conda/lib/python3.7/site-packages (from requests&gt;=2.9.1-&gt;icrawler) (2020.12.5) Building wheels for collected packages: icrawler Building wheel for icrawler (setup.py) ... done Created wheel for icrawler: filename=icrawler-0.6.4-py2.py3-none-any.whl size=35063 sha256=ee49e0f6ae08d4f09be3910a841849600317d73ef73da79f87eaaf8a1d94d250 Stored in directory: /root/.cache/pip/wheels/34/9a/e6/a8bc00ac61ff1f0e613af0d181feaef49ed226915ee7ff19d1 Successfully built icrawler Installing collected packages: soupsieve, beautifulsoup4, icrawler Successfully installed beautifulsoup4-4.9.3 icrawler-0.6.4 soupsieve-2.2.1 . 2. Packages . back to top . import os import numpy as np import pandas as pd import matplotlib.pyplot as plt for dirname, _, filenames in os.walk(&#39;/kaggle/input&#39;): for filename in filenames: print(os.path.join(dirname, filename)) # icrawler from icrawler.builtin import GoogleImageCrawler # fastai from fastai import * from fastai.vision import * from fastai.imports import * from fastai.vision.all import * # widgets import ipywidgets as widgets # ignore warnings import warnings warnings.filterwarnings(&quot;ignore&quot;) . 3. Pre-model building . back to top . 3.1 Create folder . I&#39;m creating three folders in /kaggle/working to download their respective image in each folder. . !mkdir yoda !mkdir luke !mkdir wookie . 3.2 Scrape images . The way icrawler works is that it creates a folder named /images from wherever the command is run. So right now we are in the /kaggle/working directory. Now I&#39;ll be going to each directory one at a time and run the crawler to download the images in the /images folder. So the structure of the folders will be something like . /kaggle/working/yoda/images | /kaggle/working/luke/images | /kaggle/working/wookie/images | . After the download, I&#39;ll be moving the images from the images folder of each respective label to the label folder itself - so for example from /kaggle/working/yoda/images to /kaggle/working/yoda and I&#39;ll be deleting all the empty images folder. . If you would like to reproduce the exact same thing, run the command in console first followed by the command in the notebook and so on in the provided order which is as follows. . Run the following in console . cd yoda After above command, run the following cell . google_crawler = GoogleImageCrawler() google_crawler.crawl(keyword=&#39;baby yoda&#39;, max_num=50) . Run the following in console one line at a time . cd .. cd luke After above command, run the following cell . google_crawler = GoogleImageCrawler() google_crawler.crawl(keyword=&#39;luke skywalker&#39;, max_num=50) . Run the following in console one line at a time . cd .. cd wookie After above command, run the following cell . google_crawler = GoogleImageCrawler() google_crawler.crawl(keyword=&#39;wookie&#39;, max_num=50) . 3.3 Move images . Run the following in console one line at a time . cd .. Now I&#39;ll be moving the images from /images folders to their respective labels and deleting the /images folder. Run the following in console one line at a time . mv -v yoda/images/* yoda mv -v luke/images/* luke mv -v wookie/images/* wookie rmdir yoda/images rmdir luke/images rmdir wookie/images Once done, you may check run pwd in console to check your current working directory. It must show /kaggle/working. . 4. Data Loaders . back to top . 4.1 For a single label . path = Path(&#39;/kaggle/working/yoda&#39;) dls = ImageDataLoaders.from_folder(path, valid_pct=0.5, batch_size=10, item_tfms=Resize(224)) dls.valid.show_batch(max_n=4, nrows=1) . 4.2 For the model building . characters = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(256)) # Creating the dataloader path = Path(&#39;/kaggle/working&#39;) dls = characters.dataloaders(path) # checking the images dls.valid.show_batch(max_n=18, nrows=3) . 5. Model Building . back to top . 5.1 Training . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . Downloading: &#34;https://download.pytorch.org/models/resnet18-5c106cde.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth . epoch train_loss valid_loss error_rate time . 0 | 1.834176 | 2.258008 | 0.600000 | 00:07 | . epoch train_loss valid_loss error_rate time . 0 | 1.978312 | 1.446693 | 0.566667 | 00:06 | . 1 | 1.585535 | 0.461595 | 0.133333 | 00:05 | . 2 | 1.268723 | 0.311160 | 0.066667 | 00:05 | . 3 | 1.044068 | 0.287985 | 0.066667 | 00:05 | . 5.2 Prediction . uploader = widgets.FileUpload() uploader . def helper(): img = PILImage.create(uploader.data[0]) img.show() pred,pred_idx,probs = learn.predict(img) lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; print(lbl_pred) . helper() . Label(value=&#39;Prediction: yoda; Probability: 0.9999&#39;) . helper() . Label(value=&#39;Prediction: luke; Probability: 0.9567&#39;) . helper() . Label(value=&#39;Prediction: wookie; Probability: 0.9970&#39;) . If you liked the notebook, please drop a upvote. Thank you.✅ Check out my other notebooks here: . https://www.kaggle.com/namanmanchanda/cat-vs-dog-classifier-10-lines-of-code-fast-ai | https://www.kaggle.com/namanmanchanda/titanic-eda | https://www.kaggle.com/namanmanchanda/pima-indian-diabetes-eda-and-prediction |",
            "url": "https://namanmanchanda09.github.io/mindAI/2021/05/27/starwars.html",
            "relUrl": "/2021/05/27/starwars.html",
            "date": " • May 27, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://namanmanchanda09.github.io/mindAI/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://namanmanchanda09.github.io/mindAI/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://namanmanchanda09.github.io/mindAI/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://namanmanchanda09.github.io/mindAI/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}